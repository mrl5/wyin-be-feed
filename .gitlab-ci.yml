# https://docs.gitlab.com/ee/ci/pipelines/pipeline_architectures.html
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

stages:
  - setup
  - test
  - build
  - release
  - deploy

default:
  image: python:3.7

setup_venv:
  stage: setup
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - make dev-install

lint:
  stage: test
  needs: [setup_venv]
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - make lint

unit_test:
  stage: test
  needs: [setup_venv]
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pytest --version
  script:
    - make test coverage-report
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml
      junit: report.xml

wily:
  stage: test
  before_script:
    - pip install wily
  script:
    - wily build feed/ tests/
    - wily diff feed/ tests/ -r HEAD^1

build_docker:
  stage: build
  needs: [unit_test]
  image: docker
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:dind
  before_script:
    - docker info
    - apk update
    - apk add make
  script:
    - make API_VERSION=$CI_COMMIT_SHORT_SHA build

build_latest_docker:
  stage: build
  needs: [unit_test]
  image: docker
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    CONTAINER_SHA_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    CONTAINER_LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg BUILD_VERSION=$CI_COMMIT_SHORT_SHA --pull -t $CONTAINER_SHA_IMAGE .
    - docker push $CONTAINER_SHA_IMAGE
    - docker tag $CONTAINER_SHA_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE

build_release_docker:
  stage: build
  needs: [unit_test]
  image: docker
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+)?$/'
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    CONTAINER_SHA_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg BUILD_VERSION=$CI_COMMIT_TAG --pull -t $CONTAINER_SHA_IMAGE .
    - docker tag $CONTAINER_SHA_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE

gitlab_release:
  stage: release
  needs: [build_release_docker]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+)?$/'
  script:
    - echo running release for $CI_COMMIT_TAG
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: 'Created using the release-cli'

deploy_ci:
  stage: deploy
  needs: [build_latest_docker]
  image: google/cloud-sdk:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  services:
    - docker:dind
  script:
    - echo $GCP_SERVICE_KEY_CI | base64 -d > gcloud-service-key.json
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID_CI
    - gcloud builds submit . --config=cloudbuild.yaml

deploy_prd:
  stage: deploy
  needs: [gitlab_release]
  image: google/cloud-sdk:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+)?$/'
  services:
    - docker:dind
  script:
    - echo $GCP_SERVICE_KEY_PRD | base64 -d > gcloud-service-key.json
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID_PRD
    - gcloud builds submit . --config=cloudbuild.yaml
